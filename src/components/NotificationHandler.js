import React, {useEffect} from 'react';
import {View, Platform, AppState} from 'react-native';
import messaging from '@react-native-firebase/messaging';
import {useDispatch, useSelector} from 'react-redux';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import PushNotification from 'react-native-push-notification';
import {navigateToLink, getLinkFromRemoteMessage} from './helpers';
import {
  incrementNotificationCount,
  fetchUnreadNotificationCount,
  markNotificationRead,
} from '../redux/reducers/NotificationSlice';
import {getRegistrationStatus} from '../redux/reducers/AuthSlice';

const ConfigurePushNotification = () => {
  const dispatch = useDispatch();

  PushNotification.configure({
    // (required) Called when a remote is received or opened, or local notification is opened
    onNotification: function (notification) {
      const {userInteraction} = notification;
      if (userInteraction) {
        notification?.data?.notification_id &&
          dispatch(markNotificationRead(notification.data.notification_id));
        navigateToLink(getLinkFromRemoteMessage(notification));
      }

      // (required) Called when a remote is received or opened, or local notification is opened
      // PushNotification.setApplicationIconBadgeNumber(1);
      notification.finish(PushNotificationIOS.FetchResult.NoData);
    },

    // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
    onRegistrationError: function (err) {
      console.error(err.message, err);
    },

    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
      alert: true,
      badge: true,
      sound: true,
    },

    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,

    /**
     * (optional) default: true
     * - Specified if permissions (ios) and token (android and ios) will requested or not,
     * - if not, you must call PushNotificationsHandler.requestPermissions() later
     * - if you are not using remote notification or do not have Firebase installed, use this:
     *     requestPermissions: Platform.OS === 'ios'
     */
    requestPermissions: !Platform.OS === 'ios',
  });

  return null;
};

const NotificationHandler = () => {
  const dispatch = useDispatch();
  const isRegistered = useSelector(getRegistrationStatus);

  useEffect(() => {
    PushNotification.getApplicationIconBadgeNumber(function (number) {
      if (number > 0) {
        PushNotification.setApplicationIconBadgeNumber(0);
      }
    });

    PushNotification.channelExists('default-channel', function (exists) {
      console.log('channel exists', exists); // true/false
    });

    PushNotification.createChannel(
      {
        channelId: 'default-channel', // (required)
        channelName: 'Default Channel', // (required)
        channelDescription: 'A channel to categorise your notifications', // (optional) default: undefined.
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
        importance: 4, // (optional) default: 4. Int value of the Android notification importance
        vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
      },
      (created) => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
    );

    // Check whether an initial notification is available
    messaging()
      .getInitialNotification()
      .then((remoteMessage) => {
        if (remoteMessage) {
          remoteMessage?.notification?.notification_id &&
            dispatch(
              markNotificationRead(remoteMessage.notification.notification_id),
            );
          navigateToLink(getLinkFromRemoteMessage(remoteMessage));
        }
      });

    // Check whether a notification arrived while app is on foreground
    const unsubscribe = messaging().onMessage(async (remoteMessage) => {
      dispatch(incrementNotificationCount(remoteMessage.data?.notification_id));

      const notificationObject = {
        channelId: 'default-channel',
        color: 'red',
        /* iOS only properties */
        category: 'default', // (optional) default: empty string
        /* iOS and Android properties */
        // id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        title: remoteMessage.notification.title, // (optional)
        message: remoteMessage.notification.body, // (required)
        userInfo: {...remoteMessage.data}, // (optional) default: {} (using null throws a JSON value '<null>' error)
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        //  number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      };

      PushNotification.localNotification(notificationObject);
    });

    return unsubscribe;
  }, []);

  useEffect(() => {
    const subscriber = AppState.addEventListener(
      'change',
      fetchUnreadNotificationCountHandler,
    );
    return subscriber; // unsubscribe on unmount
  }, []);

  useEffect(() => {
    if (isRegistered) {
      fetchUnreadNotificationCountHandler('active');
    }
  }, [isRegistered]);

  const fetchUnreadNotificationCountHandler = async (appState) => {
    if (appState == 'active' && isRegistered) {
      dispatch(fetchUnreadNotificationCount());
    }
  };

  return <View></View>;
};

export {NotificationHandler, ConfigurePushNotification};
